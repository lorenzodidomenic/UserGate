const { Request, Response } = require("express");

const ldap = require("ldapjs")  //const ldap = require("ldap-client")
const LdapClient = require("ldapjs-client")



//QUESTE DOVREBBERO ESSERE VARIABILI D'AMBIENTE
const serverUrl = 'ldap://10.0.200.20:389';   //indirizzo ip del container col server ldap
const bindDN = 'cn=DDMLNZ03B03F943C,ou=Studenti,dc=unict,dc=ad';  //credenziali di autenticazione (potrei mettere admin)
const bindPassword = 'Palazzolo3';  //èpassword autenticazione
response_message = ""

const client = ldap.createClient({
    url: serverUrl,
    
});  

const clientnew = new LdapClient({
    url: serverUrl
})


class User{
    sn;
    givenName;

    //qui memorizzo anche il cn , lo mando ma non lo mostro. Al click sulla riga faccio nuova query e mi manda informazioni sull'utente
    //magari in una nuova pagina
    cn;

    constructor(sn,givenName,cn){
        this.sn = sn;
        this.givenName = givenName;
        this.cn = cn;
    }
}

class Group{
    cn;
    constructor(cn){
        this.cn=cn;
    }
}

class Attribute{
    type;
    value;

    constructor(type,value){
        this.type = type;
        this.value = value;
    }
}

const modifyUserView = async (req, res) => {


    const userSearchBase = "dc=unict,dc=ad";
    // const userdn = "cn=DDMLNZ03B03F943C,ou=Studenti,dc=unict,dc=ad";
 

    entries = [];
    filterString = "cn="+req.query["cn"]

     try {

        await clientnew.bind(bindcf, bindpassword);
        console.log("bind andat a buon fine ")
        
        const searchOptions = {
            scope: 'sub',
            filter: filterString,

           attributes: ["sn","givenName","cn","memberOf","MEMBEROFGROUP"],   //potrei far vedere solo gli attributi locali
           sizeLimit: 100000,
           timeLimit: 10000
        }

        results = []
        userExist = false;

        entries = await clientnew.search(userSearchBase, searchOptions);  //array di oggetti entry
         
        let entry = undefined;
        if(entries.length > 0){
            userExist = true;
            entry = entries[0]
        }
        console.log(entry)
            

        
       if(entry != undefined){
        attrSn = new Attribute("sn",entry.sn.replace(/\s/g, ''))
        results.push(attrSn)
        attrDn = new Attribute("dn",entry.dn.replace(/\s/g, ''))
        results.push(attrDn)
        attrCn = new Attribute("cn",entry.cn.replace(/\s/g, ''))
        results.push(attrCn)
        attrGivenName = new Attribute("givenName",entry.givenName.replace(/\s/g, ''))
        results.push(attrGivenName)
        
        memberOfAttribute = Array.isArray(entry.MEMBEROFGROUP) ? entry.MEMBEROFGROUP : [entry.MEMBEROFGROUP];
        attrMemberOf = new Attribute("MEMBEROFGROUP",memberOfAttribute)
        results.push(attrMemberOf)
       }
       if(userExist){
        console.log(results)
        res.render("./modifyUser",{entries: results});
       // res.send(entries)   //mando tutta la risposta completa, qui perchè così la manda solo a risposta completata
        results = []
    }else{
        console.log("no finish")
        //DOVREI MANDARE ERRORE AL CLIENT
    }

      } catch (e) {
        console.log('Ricerca failed');
        console.log("Eccezione: ",e)
        res.send("Errore nella ricerca")
      }
/*
    const userSearchBase = "dc=unict,dc=ad";

    filterString = "cn="+req.query["cn"]
    //richiedo tutte le entry dell'utente specificato nella richiesta
    const searchOptions = {
        scope: 'sub',
        filter: filterString,
        attributes: ["sn","givenName","cn","mail","MEMBEROFGROUP"],   //potrei far vedere solo gli attributi locali
        sizeLimit: 100000,
        timeLimit: 10000
    }

    let userExist = false;

    client.search(userSearchBase,searchOptions, (error,response)=>{   //faccio la ricerca

        if(error){
            console.log("Errore nella ricerca")
        }

        response.on('searchEntry', (entry)=>{      //se andata a buon fine
            console.log("User found") 
            userExist = true;
            const attributes = entry.attributes;
        
            entries = []
            attributes.forEach((attribute) => {   //per ogni attriuto della entry 
                const values = Array.isArray(attribute.values) ? attribute.values : [attribute.values];

                attr = new Attribute(attribute.type,values)
               //  console.log(attribute.type + ": " + values.join(", "));

               entries.push(attr)

               // response_message = response_message + "<br>" + attribute.type + ": " + values.join(", ")
            });  
        })

        response.on("error" , (error)=>{
            console.log('Errore ',error)
        })

        response.on("end", ()=>{
            if(userExist){
                console.log(entries)
                res.render("./modifyUser",{entries: entries});
               // res.send(entries)   //mando tutta la risposta completa, qui perchè così la manda solo a risposta completata
                entries = []
            }else{
                console.log("no finish")
                //DOVREI MANDARE ERRORE AL CLIENT
            }
        })
    })
*/
    
}


const loginView = async (req , res) =>{ 


    
    console.log(req.body)

    //mi arriva [ '{ "cf": "DDMLNZ03B03F943C " ', '{ "password": "PALAZZOLO " ' ]

    entries = req.body
    //console.log("codice fiscale: ", JSON.parse(entries[0]).cf)
    //console.log("password: ", JSON.parse(entries[1]).password)

    bindcf = "cn="+JSON.parse(entries[0]).cf+",ou=Studenti,dc=unict,dc=ad"
    bindpassword = JSON.parse(entries[1]).password


    client.on('connectError', (err) => {   //definisco evento di errore di connessione
        // handle connection error
        console.log("errooooor",err)
      })
      
    try {
        await clientnew.bind(bindcf, bindpassword);
        console.log("bind andat a buon fine ")
        res.send("login Ok")
      } catch (e) {
        console.log('Bind failed');
        res.send("Errore nelle credenziali")
      }
    
      /*
    client.bind(bindcf,bindpassword, (error)=>{    //faccio bind col server ldap
    
        if(error){
            console.error("Errore nelle credenziali",error);
            res.send("Errore nelle credenziali")
            
           // return;
        }else{
            
            console.log("Login view: Successfully connected to the ldap proxy")
            //res.render("./main")
            res.send("login Ok")
            //dovrei reindirizzare alla pagina iniziale
        }
       
    })
*/
    

}
/* reinderizzo pagina iniziale */
const indexView = (req, res) => {
    res.render("./index");
}


const introView = (req,res) =>{
    res.render("./intro");
}

const userSectionView = (req,res)=>{
    res.render("./userSection");
}


const groupSectionView = (req,res)=>{
    res.render("./groupSection")
}


const searchView = async (req,res)=>{
   
    const userSearchBase = "dc=unict,dc=ad";

    entries = [];

     try {

        await clientnew.bind(bindcf, bindpassword);
        console.log("bind andat a buon fine ")
        
        const searchOptions = {
            scope: 'sub',
            filter: req.query["query"],
            attributes: ["sn","givenName","cn"],
            timeLimit: 10000
        }

        results = []
        userExist = false;

        entries = await clientnew.search(userSearchBase, searchOptions);  //array di oggetti entry
        

        if(entries.length > 0)
            userExist = true;

        for(entry of entries){
            user = new User(entry.givenName.replace(/\s/g, ''),entry.sn.replace(/\s/g, ''),entry.cn.replace(/\s/g, ''))
            results.push(user)
        }

        if(userExist){
            res.send(results)   //mando tutta la risposta completa, qui perchè così la manda solo a risposta completata
            entries = []
            results = []
        }else{
            res.send(results)
            console.log("no result")
            //dovrei mandare errore lato client
        }
      } catch (e) {
        console.log('Ricerca failed');
        console.log("Eccezione: ",e)
        res.send("Errore nella ricerca")
      }

     /*
     client.bind(bindcf,bindpassword, (error)=>{    //faccio bind col server ldap
    
        if(error){
            console.error("Errore nelle credenziali",error);
            
           // return;
        }else{
            
            console.log("Login view: Successfully connected to the ldap proxy")
            //res.render("./main")
            //dovrei reindirizzare alla pagina iniziale
        }
    *
})


     client.search(userSearchBase,searchOptions, (error,response)=>{   //faccio la ricerca
 
         if(error){
             console.log("Errore nella ricerca")
         }
 
         response.on('searchEntry', (entry)=>{      //se andata a buon fine
             console.log("User found"+i) 
             i = i+1
             userExist = true;
             const attributes = entry.attributes;
             
            
             user = new User(attributes[2].values.join(","),attributes[1].values.join(","),attributes[0].values.join(","))
             
             entries.push(user)
  
         })
 
         response.on("error" , (error)=>{
             console.log('Errore errore',error)
         })
 
         response.on("end", ()=>{
             if(userExist){
                 console.log(entries);
                 res.send(entries)   //mando tutta la risposta completa, qui perchè così la manda solo a risposta completata
                 entries = []
             }else{
                 res.send(entries)
                 console.log("no finish")
                 //dovrei mandare errore lato client
             }
         })
     })*/
}


const userInfoView = async (req,res)=>{

    const userSearchBase = "dc=unict,dc=ad";
    // const userdn = "cn=DDMLNZ03B03F943C,ou=Studenti,dc=unict,dc=ad";
 

    entries = [];

     try {

        await clientnew.bind(bindcf, bindpassword);
        console.log("bind andat a buon fine ")
        
        const searchOptions = {
            scope: 'sub',
            filter: req.query["query"],
           // filter: 'cn=DDMLNZ03B03F943C',
           // filter: 'memberOf=CN=Studenti abilitati VPN,OU=Gruppi studenti,DC=unict,DC=ad',
           //filter: 'cn=MATEMATICA E INFORMATICA',
    
            //da ora in poi lavoro su memmber of in locale
           //filter: 'carLicense=VALID',
            
           attributes: ["sn","givenName","cn","memberOf","MEMBEROFGROUP"],   //potrei far vedere solo gli attributi locali
           sizeLimit: 100000,
           timeLimit: 10000
        }

        results = []
        userExist = false;

        entries = await clientnew.search(userSearchBase, searchOptions);  //array di oggetti entry
         
        let entry = undefined;
        if(entries.length > 0){
            userExist = true;
            entry = entries[0]
        }
        console.log(entry)
            

        
       if(entry != undefined){
        attrSn = new Attribute("sn",entry.sn.replace(/\s/g, ''))
        results.push(attrSn)
        attrDn = new Attribute("dn",entry.dn.replace(/\s/g, ''))
        results.push(attrDn)
        attrCn = new Attribute("cn",entry.cn.replace(/\s/g, ''))
        results.push(attrCn)
        attrGivenName = new Attribute("givenName",entry.givenName.replace(/\s/g, ''))
        results.push(attrGivenName)
        
        memberOfAttribute = Array.isArray(entry.MEMBEROFGROUP) ? entry.MEMBEROFGROUP : [entry.MEMBEROFGROUP];
        attrMemberOf = new Attribute("MEMBEROFGROUP",memberOfAttribute)
        results.push(attrMemberOf)
       }
        if(userExist){
            console.log(results)
            res.send(results)   //mando tutta la risposta completa, qui perchè così la manda solo a risposta completata
            results = []
        }else{
            res.send(entries)
            console.log("no finish")
            //dovrei mandare errore
        }

      } catch (e) {
        console.log('Ricerca failed');
        console.log("Eccezione: ",e)
        res.send("Errore nella ricerca")
      }

      /*
     client.bind(bindcf,bindpassword, (error)=>{    //faccio bind col server ldap
    
        if(error){
            console.error("Errore nelle credenziali",error);
           // return;
        }else{
            
            console.log("Login view: Successfully connected to the ldap proxy")
            //res.render("./main")
            //dovrei reindirizzare alla pagina iniziale
        }})
 
     let userExist = false;
 
     client.search(userSearchBase,searchOptions, (error,response)=>{   //faccio la ricerca
 
         if(error){
             console.log("Errore nella ricerca")
         }
 
         response.on('searchEntry', (entry)=>{      //se andata a buon fine
             console.log("User found") 
             userExist = true;
             const attributes = entry.attributes;
         
             entries = []
             attributes.forEach((attribute) => {   //per ogni attriuto della entry 
                 const values = Array.isArray(attribute.values) ? attribute.values : [attribute.values];
 
                 attr = new Attribute(attribute.type,values)
                //  console.log(attribute.type + ": " + values.join(", "));
 
                entries.push(attr)
 
                // response_message = response_message + "<br>" + attribute.type + ": " + values.join(", ")
             });  
         })
 
         response.on("error" , (error)=>{
             console.log('Errore errore',error)
         })
 
         response.on("end", ()=>{
             if(userExist){
                 console.log(entries)
                 res.send(entries)   //mando tutta la risposta completa, qui perchè così la manda solo a risposta completata
                 entries = []
             }else{
                 res.send(entries)
                 console.log("no finish")
                 //dovrei mandare errore
             }
         })
     })*/
}


/*
function modifyUser(modifiedAttributes){
    
    
    client.bind("cn=admin,ou=Studenti,dc=unict,dc=ad","palazzolo", (error)=>{    //faccio bind col server ldap
    
        if(error){
            console.error("Errore nelle credenziali",error);
           // res.send("Errore nelle credenziali")
            
           // return;
        }else{
            
            console.log("Login view: Successfully connected to the ldap proxy")
            //res.render("./main")
            //dovrei reindirizzare alla pagina iniziale
        }
       
    })

    finish = false;
    for(attr in modifiedAttributes){
        console.log(modifiedAttributes[attr][attr])
       // console.log(modifiedAttributes["'"+attr+"'"].attr)
       const attrModified = new ldap.Attribute(
        {
        type: attr,
        values: modifiedAttributes[attr][attr]
        }
       )

       const change = new ldap.Change({
        operation: 'replace',
        modification: attrModified
       });

       client.modify('cn='+modifiedAttributes["cn"].cn+',ou=Studenti,dc=unict,dc=ad', change, (err) => {
        if(err == null){
            console.log("modifica ok")
            finish = true;
            //res.send("Modifica ok")
        }else{
            console.log(err)
        }
      });
    }

    return finish;
  

}*/

const modifyUserInfoView = async (req,res)=>{

      
   console.log("oooo")
   let length = 0; 
    try {

        await clientnew.bind("cn=admin,ou=Studenti,dc=unict,dc=ad","palazzolo");
        console.log("bind andat a buon fine ")

        modifiedAttributes = []
        counterAttrModified = 0;
        
        for(entry of req.body){
        //modifiedAttributes.push(JSON.parse(entry))
        modifiedAttributes[Object.keys(JSON.parse(entry))] = JSON.parse(entry)
        length++;
        }

        console.log("Modified attributes: ",modifiedAttributes)

    //let length = modifiedAttributes.length
    console.log(length)

    for(attr in modifiedAttributes){
        console.log(modifiedAttributes[attr][attr])
        console.log(Object.keys(modifiedAttributes[attr]))
      
       /*
       const attrModified = new ldap.Attribute(
        {
        type: attr,
        values: modifiedAttributes[attr][attr]
        }
       )

       const change = new ldap.Change({
        operation: 'replace',
        modification: attrModified
       });
*/

     type = modifiedAttributes[attr];
     console.log(type)

    if(Object.keys(modifiedAttributes[attr])[0] =="sn"){
    change = {
    operation: 'replace',
    modification: {
        sn: modifiedAttributes[attr][attr]
    }
    }
}
if(Object.keys(modifiedAttributes[attr])[0] =="cn"){
    change = {
    operation: 'replace',
    modification: {
        cn: modifiedAttributes[attr][attr]
    }
    }
}

if(Object.keys(modifiedAttributes[attr])[0] =="givenName"){
    change = {
    operation: 'replace',
    modification: {
        givenName: modifiedAttributes[attr][attr]
    }
    }
}

console.log(change)
await clientnew.modify('cn='+modifiedAttributes["cn"].cn+',ou=Studenti,dc=unict,dc=ad', change);

       console.log("modifica ok")
      
    }
    console.log("Modifiche finite")
    res.send("Modifica ok")
      } catch (e) {
        console.log("Eccezione: "+e);
      }

    //DEVO MODIFICARE SIA IL GRUPPO CHE L'UTENTE 

    /*
    client.bind("cn=admin,ou=Studenti,dc=unict,dc=ad","palazzolo", (error)=>{    //faccio bind col server ldap
    
        if(error){
            console.error("Errore nelle credenziali",error);
           // res.send("Errore nelle credenziali")
            
           // return;
        }else{
            
            console.log("Login view: Successfully connected to the ldap proxy")
            //res.render("./main")
            //dovrei reindirizzare alla pagina iniziale
        }
       
    })

    
    modifiedAttributes = []
    let length = 0; 
    for(entry of req.body){
        //modifiedAttributes.push(JSON.parse(entry))
        modifiedAttributes[Object.keys(JSON.parse(entry))] = JSON.parse(entry)
        length++;
    }

   console.log("Modified attributes: ",modifiedAttributes)


    counterAttrModified = 0;

    //let length = modifiedAttributes.length
    console.log(this.length)

    for(attr in modifiedAttributes){
        console.log(modifiedAttributes[attr][attr])
       // console.log(modifiedAttributes["'"+attr+"'"].attr)
       const attrModified = new ldap.Attribute(
        {
        type: attr,
        values: modifiedAttributes[attr][attr]
        }
       )

       const change = new ldap.Change({
        operation: 'replace',
        modification: attrModified
       });

       client.modify('cn='+modifiedAttributes["cn"].cn+',ou=Studenti,dc=unict,dc=ad', change, (err)=>{
        if(err == null){
            console.log("modifica ok")
            counterAttrModified++; 
            console.log(counterAttrModified)
            if(counterAttrModified == length){
                console.log("Modifiche finite")
                res.send("Modifica ok")
            }
        }else{
            console.log(err)
        }
      });
    }



    /*
    const attrMember = new ldap.Attribute(
        {
        type: 'member',
        values: modifiedAttributes["MEMBEROFGROUP"].MEMBEROFGROUP
        }
    )

    //dovrei modificare l'attributo mandato 

    const attr = new ldap.Attribute(
        {
        type: 'memberOf',
        values: modifiedAttributes["MEMBEROFGROUP"].MEMBEROFGROUP
        }
    )
    const change = new ldap.Change({
        operation: 'replace',
        modification: attr
      });
      
      //clientAdmin
      client.modify('cn='+modifiedAttributes["cn"].cn+',ou=Studenti,dc=unict,dc=ad', change, (err) => {
        if(err == null){
            console.log("modifica ok")
            res.send("Modifica ok")
        }else{
            console.log(err)
        }
      });
      */
      
}

const searchGroupsView = async (req,res)=>{


    const userSearchBase = "ou=Gruppi Locali,dc=unict,dc=ad";

    entries = [];
    searchOptions = {
        scope: 'sub',
        filter : '(objectClass=groupOfNames)',
        attributes: ["cn"],
        timeLimit: 10000
  };

     try {

        await clientnew.bind(bindcf, bindpassword);
        console.log("bind andat a buon fine ")
        
        if((req.query["query"]!=undefined) && (req.query["query"].length != 0)){
            this.searchOptions = {
                scope: 'sub',
                filter: req.query["query"],
                attributes: ["cn"],
                timeLimit: 10000
          }
          }

        results = []
        userExist = false;
        console.log(this.searchOptions)
        entries = await clientnew.search(userSearchBase, searchOptions);  //array di oggetti entry
        console.log(entries)

        if(entries.length > 0)
            userExist = true;

        for(entry of entries){
            group = new Group(entry.cn.replace(/\s/g, ''))
            results.push(group)
        }

        if(userExist){
            res.send(results)   //mando tutta la risposta completa, qui perchè così la manda solo a risposta completata
            entries = []
            results = []
        }else{
            res.send(results)
            console.log("no result")
            //dovrei mandare errore lato client
        }
      } catch (e) {
        console.log('Ricerca failed');
        console.log("Eccezione: ",e)
        res.send("Errore nella ricerca")
      }

    //////----------------------------

      //const userName ='DDMLNZ03B03F943C';
      
      //const userdn = "cn=DDMLNZ03B03F943C,ou=Studenti,dc=unict,dc=ad";
  
      
      /*console.log(req.query["query"])
      searchOptions = {
        scope: 'sub',
        filter: "objectClass=groupOfNames",
        attributes: ["cn"],
        timeLimit: 10000
  };

    

      if((req.query["query"]!=undefined) && (req.query["query"].length != 0)){
        searchOptions = {
            scope: 'sub',
            filter: req.query["query"],
            attributes: ["cn"],
            timeLimit: 10000
      }
      }
  */
      /*
      let userExist = false;
  
      entries = [];
      client.search(userSearchBase,searchOptions, (error,response)=>{   //faccio la ricerca
  
          if(error){
              console.log("Errore nella ricerca")
          }
  
          response.on('searchEntry', (entry)=>{      //se andata a buon fine
              console.log("User found") 
              userExist = true;
              
              const attributes = entry.attributes;
             
              group = new Group(attributes[0].values.join(","))
              entries.push(group)
   
          })
  
          response.on("error" , (error)=>{
              console.log('Errore errore',error)
          })
  
          response.on("end", ()=>{
              if(userExist){
                  console.log(entries);
                  res.send(entries)   //mando tutta la risposta completa, qui perchè così la manda solo a risposta completata
                  entries = []
              }else{
                  res.send(entries)
                  console.log("no finish")
                  //dovrei mandare errore lato client
              }
          })
      })*/

}

const groupInfoView = async (req,res)=>{

    
    // const userdn = "cn=DDMLNZ03B03F943C,ou=Studenti,dc=unict,dc=ad";
    const userSearchBase = "ou=Gruppi Locali,dc=unict,dc=ad";

    entries = [];

     try {

        await clientnew.bind(bindcf, bindpassword);
        console.log("bind andat a buon fine ")
        
        const searchOptions = {
            scope: 'sub',
            filter: req.query["query"],
           // filter: 'cn=DDMLNZ03B03F943C',
           // filter: 'memberOf=CN=Studenti abilitati VPN,OU=Gruppi studenti,DC=unict,DC=ad',
           //filter: 'cn=MATEMATICA E INFORMATICA',
    
            //da ora in poi lavoro su memmber of in locale
           //filter: 'carLicense=VALID',
            
           attributes: ["dn","cn","member","objectClass"],   //potrei far vedere solo gli attributi locali
           sizeLimit: 100000,
           timeLimit: 10000
        }

        results = []
        userExist = false;

        entries = await clientnew.search(userSearchBase, searchOptions);  //array di oggetti entry
         
        let entry = undefined;
        if(entries.length > 0){
            userExist = true;
            entry = entries[0]
        }
        console.log(entry)
            

        
       if(entry != undefined){
        attrDn = new Attribute("dn",entry.dn.replace(/\s/g, ''))
        results.push(attrDn)
        attrCn = new Attribute("cn",entry.cn.replace(/\s/g, ''))
        results.push(attrCn)
        attrObjectClass = new Attribute("objectClass",entry.objectClass.replace(/\s/g, ''))
        results.push(attrObjectClass)
        
        member= Array.isArray(entry.member) ? entry.member: [entry.member];
        attrMember = new Attribute("member",member)
        results.push(attrMember)
       }
        if(userExist){
            console.log(results)
            res.send(results)   //mando tutta la risposta completa, qui perchè così la manda solo a risposta completata
            results = []
        }else{
            res.send(entries)
            console.log("no finish")
            //dovrei mandare errore
        }

      } catch (e) {
        console.log('Ricerca failed');
        console.log("Eccezione: ",e)
        res.send("Errore nella ricerca")
      }


    //////-------

    //const userSearchBase = "ou=Gruppi Locali,dc=unict,dc=ad";
    // const userdn = "cn=DDMLNZ03B03F943C,ou=Studenti,dc=unict,dc=ad";
 /*
     const searchOptions = {
         scope: 'sub',
         filter: req.query["query"],
        // filter: 'cn=DDMLNZ03B03F943C',
        // filter: 'memberOf=CN=Studenti abilitati VPN,OU=Gruppi studenti,DC=unict,DC=ad',
        //filter: 'cn=MATEMATICA E INFORMATICA',
 
         //da ora in poi lavoro su memmber of in locale
        //filter: 'carLicense=VALID',
         
        attributes: ["cn","member","objectClass"],   //potrei far vedere solo gli attributi locali
        sizeLimit: 100000,
        timeLimit: 10000
     }
 
     let userExist = false;*/
 /*
     client.search(userSearchBase,searchOptions, (error,response)=>{   //faccio la ricerca
 
         if(error){
             console.log("Errore nella ricerca")
         }
 
         response.on('searchEntry', (entry)=>{      //se andata a buon fine
             console.log("User found") 
             userExist = true;
             const attributes = entry.attributes;
         
             entries = []
             attributes.forEach((attribute) => {   //per ogni attriuto della entry 
                 const values = Array.isArray(attribute.values) ? attribute.values : [attribute.values];
 
                 attr = new Attribute(attribute.type,values)
                //  console.log(attribute.type + ": " + values.join(", "));
 
                entries.push(attr)
 
                // response_message = response_message + "<br>" + attribute.type + ": " + values.join(", ")
             });  
         })
 
         response.on("error" , (error)=>{
             console.log('Errore errore',error)
         })
 
         response.on("end", ()=>{
             if(userExist){
                 console.log(entries)
                 res.send(entries)   //mando tutta la risposta completa, qui perchè così la manda solo a risposta completata
                 entries = []
             }else{
                 res.send(entries)
                 console.log("no finish")
                 //dovrei mandare errore
             }
         })
     })
*/
}


const saveGroupView = async (req,res)=>{

    entries = req.body
    newGroup = JSON.parse(entries[0]);


   
    try {
        await clientnew.bind("cn=admin,dc=unict,dc=ad","palazzolo");
        console.log("bind andat a buon fine ")

        const entry= {
            cn: newGroup["cn"],
            objectclass: 'groupOfNames',
            member: ""
        };

        
      
        await clientnew.add("cn="+newGroup["cn"]+ ",ou=Gruppi Locali,dc=unict,dc=ad", entry);
        res.send("Ok")
      } catch (e) {
        console.log(e)
        console.log('Add failed');
      }

      
   /* client.bind("cn=admin,dc=unict,dc=ad","palazzolo", (error)=>{    //faccio bind col server ldap
    
        if(error){
            console.error("Errore nelle credenziali",error);
           // res.send("Errore nelle credenziali")
            
           // return;
        }else{
            
            console.log("Login view: Successfully connected to the ldap proxy")
            //res.render("./main")
            //dovrei reindirizzare alla pagina iniziale
        }
       
    })*/


    /*
    entry= {
        cn: newGroup["cn"],
        objectclass: 'groupOfNames',
        member: ""
    };

      /*
      //dovrei salvarlo anche in studenti

      client.add( "cn="+newGroup["cn"]+ ",ou=Studenti,dc=unict,dc=ad", entry2, function(err) {
        if(err != null){
            console.log(err)
        }else{
            res.send("Ok")
        }
      });

*/

/*
    client.add( "cn="+newGroup["cn"]+ ",ou=Gruppi Locali,dc=unict,dc=ad", entry, function(err) {
        if(err != null){
            console.log("Erorre perchè mancna ou=Gruppi Locali")
            console.log(err)
        }else{
            res.send("Ok")
        }
      });




    //mi arriva {"cn": "Gruppo"}

    //salvo il nuovo gruppo sia in "ou=Studenti" sia in unict,ad

*/
}

const addMemberView = async (req,res)=>{

    

    member = JSON.parse(req.body[1])
    group = JSON.parse(req.body[0])
    
    
    /* devo salvare nel database studenti anche l'utente*/
    entry = {
        cn: member.cnMember,
        objectclass: 'top',
    };

    const clientAux= new LdapClient({
        url: serverUrl
    })

    try{
        await clientAux.bind("cn=admin,ou=Studenti,dc=unict,dc=ad","palazzolo");
        console.log("bind andat a buon fine ")

        await clientAux.add("cn="+member.cnMember+ ",ou=Studenti,dc=unict,dc=ad", entry);

    }catch(e){
         console.log("errore nell'inserimento dello studente ma previsto")
    }

    //modifica memberOf
    try {

        await clientAux.bind("cn=admin,ou=Studenti,dc=unict,dc=ad","palazzolo");
        console.log("bind andat a buon fine ")

        const change2 = {
          operation: 'add', // add, delete, replace
          modification: {
            memberOf: "cn="+group.cnGroup+",ou=Gruppi Locali,dc=unict,dc=ad"
          }
        };

        await clientAux.modify('cn='+member.cnMember+',ou=Studenti,dc=unict,dc=ad', change2);
        console.log("modifica member of ok")
      } catch (e) {
        console.log("Errorre inseriemnto member of",e);
      }
   
      try {

        await clientnew.bind("cn=admin,dc=unict,dc=ad","palazzolo");
        console.log("bind andat a buon fine ")

        const change3 = {
          operation: 'add', // add, delete, replace
          modification: {
            member:"cn="+member.cnMember+",ou=Studenti,dc=unict,dc=ad"
          }
        };


        await clientnew.modify('cn='+group.cnGroup+',ou=Gruppi Locali,dc=unict,dc=ad', change3);
        console.log("secondo salvataggio effettuato")
            res.send("Ok")
      } catch (e) {
        console.log("Errorre inseriemnto member",e);
      }
/*
    const attr = new ldap.Attribute(
        {
         type: 'member',
         values: "cn="+member.cnMember+",ou=Studenti,dc=unict,dc=ad"
        })

    const attr2 = new ldap.Attribute(
            {
             type: 'memberOf',
             values: "cn="+group.cnGroup+",ou=Gruppi Locali,dc=unict,dc=ad"
            })

    const clientAux = ldap.createClient({
            url: serverUrl,
    });  
    //faccio modifica al dn di quel gruppo aggiungendo member
    const change = new ldap.Change({
        operation: 'add',
        modification: attr
      });
    
    const change2 = new ldap.Change({
        operation: 'add',
        modification: attr2
      });


    clientAux.bind("cn=admin,ou=Studenti,dc=unict,dc=ad","palazzolo", (error)=>{    //faccio bind col server ldap
    
        if(error){
            console.error("Errore nelle credenziali",error);
           // res.send("Errore nelle credenziali")
            
           // return;
        }else{
            
            console.log(" Successfully Admin connected to the ldap proxy")
            //res.render("./main")
            //dovrei reindirizzare alla pagina iniziale
        }
       
    })

    /* ggiungo utente*/
  /*  clientAux.add( "cn="+member.cnMember+ ",ou=Studenti,dc=unict,dc=ad", entry, function(err) {
        if(err != null){
            console.log("Errore inserimento persona: ",err)
        }else{
            console.log("aggiunta person a")
        }
      });

    clientAux.modify('cn='+member.cnMember+',ou=Studenti,dc=unict,dc=ad', change2, (err) => {
        if(err != null){
            //POTREBBE DARE ERRORE DI STRONG AUTENTICATION REQUIRE, in caso mandare un messagio 
            console.log("Errore ou",err)
        }else{
            console.log("Anche secondo salvataggio avvenuto")
        }
      });


    //perche per fare modifiche devo avere certa autenticazione
    client.bind("cn=admin,dc=unict,dc=ad","palazzolo", (error)=>{    //faccio bind col server ldap
    
        if(error != null){
            console.error("Errore nelle credenziali",error);
           // res.send("Errore nelle credenziali")
            
           // return;
        }else{
            
            console.log("Login view: Successfully connected to the ldap proxy")
            //res.render("./main")
            //dovrei reindirizzare alla pagina iniziale
        }
       
    })

      
      client.modify('cn='+group.cnGroup+',ou=Gruppi Locali,dc=unict,dc=ad', change, (err) => {
        if(err != null){

            //POTREBBE DARE ERRORE DI STRONG AUTENTICATION REQUIRE
            console.log(err)
        }else{
            console.log("primo salvataggio effettuato")
            res.send("Ok")
        }
      });   */
}

const modifyMembershipView = async (req,res)=>{


    console.log(req.body)

    cnUtente = JSON.parse(req.body[1])  //qui ho cnUtente
    cnGroup = JSON.parse(req.body[0])  //qui ho cn del gruppo

    const clientAux= new LdapClient({
        url: serverUrl
    })
    
    try {

        await clientnew.bind("cn=admin,dc=unict,dc=ad","palazzolo");
        console.log("bind andat a buon fine ")

        const change = {
          operation: 'delete', // add, delete, replace
          modification: {
            member:"cn="+cnUtente.cnMember+",ou=Studenti,dc=unict,dc=ad"
          }
        };


        await clientnew.modify(cnGroup.cnGroup, change);
        console.log("secondo salvataggio effettuato")
            res.send("Ok")
      } catch (e) {
        console.log("Errorre inseriemnto member",e);
      }

      try {

        await clientAux.bind("cn=admin,ou=Studenti,dc=unict,dc=ad","palazzolo");
        console.log("bind andat a buon fine ")

        const change2 = {
          operation: 'delete', // add, delete, replace
          modification: {
            memberOf: cnGroup.cnGroup 
          }
        };

        await clientAux.modify("cn="+cnUtente.cnMember+",ou=Studenti,dc=unict,dc=ad", change2);
        console.log("modifica member of ok")
      } catch (e) {
        console.log("Errorre inseriemnto member of",e);
      }

/*
    client.bind("cn=admin,dc=unict,dc=ad","palazzolo", (error)=>{    //faccio bind col server ldap
    
        if(error != null){
            console.error("Errore nelle credenziali",error);
           // res.send("Errore nelle credenziali")
            
           // return;
        }else{
            
            console.log("Login view: Successfully connected to the ldap proxy")
            //res.render("./main")
            //dovrei reindirizzare alla pagina iniziale
        }
       
    })*/
/*
    const attr = new ldap.Attribute(
        {
         type: 'member',
         values: "cn="+cnUtente.cnMember+",ou=Studenti,dc=unict,dc=ad"
        })


    const change = new ldap.Change({
        operation: 'delete',
        modification: attr
      });
      
      client.modify(cnGroup.cnGroup, change, (err) => {
        if(err){
        console.log(err)
        }else{
            console.log("Modifica Gruppo andata a buon fine")
        }
      });*/




      /* devo anche modificare il memberOf del cnUtente*/
   /*   client.bind("cn=admin,ou=Studenti,dc=unict,dc=ad","palazzolo", (error)=>{    //faccio bind col server ldap
    
        if(error != null){
            console.error("Errore nelle credenziali",error);
           // res.send("Errore nelle credenziali")
            
           // return;
        }else{
            
            console.log("Login view: Successfully admin connected to the ldap proxy")
            //res.render("./main")
            //dovrei reindirizzare alla pagina iniziale
        }
       
    })

    console.log("cn="+cnGroup.cnGroup+",ou=Gruppi Locali,dc=unict,dc=ad")
    const attr2 = new ldap.Attribute(
        {
         type: 'memberOf',
         values: cnGroup.cnGroup
        })


    const change2 = new ldap.Change({
        operation: 'delete',
        modification: attr2
      });
      
      client.modify("cn="+cnUtente.cnMember+",ou=Studenti,dc=unict,dc=ad", change2, (err) => {
        if(err){
        console.log(err)
        }else{
            console.log("Modifica 2 andata a buon fine")
        }
      });
*/

}


module.exports = { modifyUserView,
                   indexView,
                   loginView,
                   introView,
                   userSectionView,
                   groupSectionView,
                   searchView,
                   userInfoView,
                   modifyUserInfoView,
                   searchGroupsView,
                   groupInfoView,
                   saveGroupView,
                   addMemberView,
                   modifyMembershipView} 